// <auto-generated />
using System;
using Education_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Education_API.Data.Migrations
{
    [DbContext(typeof(EducationContext))]
    [Migration("20220603081950_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("Education_API.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Farsta",
                            Country = "Sweden",
                            PostalCode = "12349",
                            StreetAddress = "Havsörnsgränd 3"
                        },
                        new
                        {
                            Id = 2,
                            City = "Nacka",
                            Country = "Sweden",
                            PostalCode = "13148",
                            StreetAddress = "Diligensvägen 46"
                        },
                        new
                        {
                            Id = 3,
                            City = "Nacka",
                            Country = "Sweden",
                            PostalCode = "13243",
                            StreetAddress = "Kölnavägen 5"
                        },
                        new
                        {
                            Id = 4,
                            City = "Stockholm",
                            Country = "Sweden",
                            PostalCode = "12325",
                            StreetAddress = "Storgatan 5"
                        },
                        new
                        {
                            Id = 5,
                            City = "Enköping",
                            Country = "Sweden",
                            PostalCode = "15247",
                            StreetAddress = "Långvägen 12"
                        },
                        new
                        {
                            Id = 6,
                            City = "Norrköping",
                            Country = "Sweden",
                            PostalCode = "24856",
                            StreetAddress = "Västra allén 48"
                        });
                });

            modelBuilder.Entity("Education_API.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = ".NET"
                        },
                        new
                        {
                            Id = 2,
                            Title = "JavaScript"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Python"
                        });
                });

            modelBuilder.Entity("Education_API.Models.Competence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Competence");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "ASP.NET Core"
                        },
                        new
                        {
                            Id = 2,
                            Title = "REST APIs"
                        },
                        new
                        {
                            Id = 3,
                            Title = "SQL"
                        });
                });

            modelBuilder.Entity("Education_API.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CourseNumber = 1179,
                            Description = "Learn C# for total beginners",
                            Details = "Syntax, Variables, Arrays, Lists",
                            Duration = 410,
                            Title = "C# For Beginners"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CourseNumber = 1180,
                            Description = "Become a skilled JavaScript programmer",
                            Details = "Asynchronous Programming, Writing Cross-Browser Code, JavaScript Instantiation Patterns",
                            Duration = 320,
                            Title = "JavaScript Programming"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CourseNumber = 1181,
                            Description = "Basics of Python",
                            Details = "Data Types, Dictionaries, Functions",
                            Duration = 180,
                            Title = "Learn Python"
                        });
                });

            modelBuilder.Entity("Education_API.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Student");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Email = "connyforsling@gmail.com",
                            FirstName = "Conny",
                            LastName = "Forsling",
                            PhoneNumber = "0735123583"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            Email = "deseregh@gmail.com",
                            FirstName = "Deseré",
                            LastName = "Gullberg Husberg",
                            PhoneNumber = "0704004951"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            Email = "rolfhusberg@gmail.com",
                            FirstName = "Rolf",
                            LastName = "Husberg",
                            PhoneNumber = "0709119459"
                        });
                });

            modelBuilder.Entity("Education_API.Models.StudentCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentCourse");
                });

            modelBuilder.Entity("Education_API.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Teacher");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 4,
                            Email = "annapettersson@gmail.com",
                            FirstName = "Anna",
                            LastName = "Pettersson",
                            PhoneNumber = "0705123583"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 5,
                            Email = "lisakarlsson@gmail.com",
                            FirstName = "Lisa",
                            LastName = "Karlsson",
                            PhoneNumber = "0734054951"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 6,
                            Email = "ollesvensson@gmail.com",
                            FirstName = "Olle",
                            LastName = "Svensson",
                            PhoneNumber = "0737119458"
                        });
                });

            modelBuilder.Entity("Education_API.Models.TeacherCompetence", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompetenceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "CompetenceId");

                    b.HasIndex("CompetenceId");

                    b.ToTable("TeacherCompetence");
                });

            modelBuilder.Entity("Education_API.Models.Course", b =>
                {
                    b.HasOne("Education_API.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Education_API.Models.Student", b =>
                {
                    b.HasOne("Education_API.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Education_API.Models.StudentCourse", b =>
                {
                    b.HasOne("Education_API.Models.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Education_API.Models.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Education_API.Models.Teacher", b =>
                {
                    b.HasOne("Education_API.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Education_API.Models.TeacherCompetence", b =>
                {
                    b.HasOne("Education_API.Models.Competence", "Competence")
                        .WithMany("TeacherCompetences")
                        .HasForeignKey("CompetenceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Education_API.Models.Teacher", "Teacher")
                        .WithMany("TeacherCompetences")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Competence");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Education_API.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Education_API.Models.Competence", b =>
                {
                    b.Navigation("TeacherCompetences");
                });

            modelBuilder.Entity("Education_API.Models.Course", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("Education_API.Models.Student", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("Education_API.Models.Teacher", b =>
                {
                    b.Navigation("TeacherCompetences");
                });
#pragma warning restore 612, 618
        }
    }
}
